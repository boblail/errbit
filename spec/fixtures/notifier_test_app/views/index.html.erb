<html>
<head>
  <title>notifier.js Test App</title>
  <script src="/notifier.js" type="text/javascript"></script>
  <script type="text/javascript"> 
    Hoptoad.setKey('API_KEY');
    Hoptoad.setHost('<%= @host %>');
    Hoptoad.setEnvironment('ENVIRONMENT');
    Hoptoad.setErrorDefaults({
      "action_name": "ACTION NAME",
      "url": "URL",
      "controller_name": "CONTROLLER NAME"
    });
  </script>
</head>
<body>
  <h1>notifier.js Test App</h1>
  <fieldset>
    <legend>Generate Errors</legend>
    <button onclick="Errors.generate('normal');return false;">Normal Error</button>
  </fieldset>
  
  <button onclick="Errors.showIframe();return false;">Show notification</button>
  
  <h2>Report</h2>
  <pre id="notification">--</pre>
  
  <script type="text/javascript">
    var Errors = (function() {
      
      var error_generators = {
        normal: function() { what(); }
      };
      
      function generate(errorName) {
        cleanIframes();
        error_generators[errorName]();
      }
      
      function cleanIframes() {
        var head = document.getElementsByTagName('head')[0],
            children = head.childNodes;
        for(var i=0, ii=children.length; i<ii;) {
          var node = children[i];
          if(node.nodeName.toUpperCase() == 'IFRAME') {
            head.removeChild(node);
          } else {
            i++;
          }
        }
      }
      
      function showIframe() {
        var iframe      = getLastIframe();
        var src         = iframe.src.match(/data=(.*)/)[1],
            html        = decodeURIComponent(src),
            formatted   = formatXml(html),
            target      = document.getElementById('notification'),
            textNode    = document.createTextNode(formatted);
        while(target.firstChild) {
          target.removeChild(target.firstChild);
        }
        target.appendChild(textNode);
      }
      
      function getLastIframe() {
        var head = document.getElementsByTagName('head')[0],
            children = head.childNodes,
            iframe = null;
        for(var i=0, ii=children.length; i<ii; i++) {
          var node = children[i];
          if(node.nodeName.toUpperCase() == 'IFRAME') {
            iframe = node;
          }
        }
        return iframe;
      }
      
      function unescapeHtml(html) {
        return html.replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&amp;/g,'&');
      }
      
      function formatXml(xml) {
        var formatted = '',
            reg       = /(>)(<)(\/*)/g,
            pad       = 0,
            node,
            indent,
            padding;
            xml       = xml.replace(reg, '$1\r\n$2$3');
        var _split    = xml.split('\r\n');
        for(var index=0, ii=_split.length; index<ii; index++) {
          node = _split[index];
          indent = 0;
          if(node.match(/.+<\/\w[^>]*>$/)) {
            indent = 0;
          } else if(node.match(/^<\/\w/)) {
            (pad != 0) && (pad -= 1);
          } else if(node.match(/^<\w[^>]*[^\/]>.*$/)) {
            indent = 1;
          } else {
            indent = 0;
          }
          
          padding = '';
          for(var i=0; i<pad; i++) {
            padding += '  ';
          }
          
          formatted += padding + node + '\r\n';
          pad += indent;
        }
        
        return formatted;
      }
      
      return {
        generate: generate,
        showIframe: showIframe
      }
    })();
  </script>
</body>
</html>
  